{
  "address": "0xeA394E7cC51C8ce6c18007a6c2B4406f3Fae91e1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "team1_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "team2_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ApprovalCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalToCurrentOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApproveToCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceQueryForZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintZeroQuantity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromIncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToNonERC721ReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "URIQueryForNonexistentToken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_claimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flipSaleState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flipWhitelistState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isRevealed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "listingPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof_",
          "type": "bytes32[]"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftBaseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saleIsActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "nftBaseURI_",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "listingPrice_",
          "type": "uint256"
        }
      ],
      "name": "setListingPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxPerWallet_",
          "type": "uint256"
        }
      ],
      "name": "setMaxPerWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setRevealed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "root_",
          "type": "bytes32"
        }
      ],
      "name": "setRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "team",
          "type": "address[]"
        }
      ],
      "name": "setTeam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "unrevealedURI_",
          "type": "string"
        }
      ],
      "name": "setUnrevealedURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "team1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "team2",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "teamMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unrevealedURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0e930988b327c88de408048f0a539f54b67d74c1798f572adfd0955fc720e751",
  "receipt": {
    "to": null,
    "from": "0xA363ad8360989178e4e174e56DcC192141bEa021",
    "contractAddress": "0xeA394E7cC51C8ce6c18007a6c2B4406f3Fae91e1",
    "transactionIndex": 113,
    "gasUsed": "2220771",
    "logsBloom": "0x
    "blockHash": "0x7fb7fbf48ec1d141954989ba3a4602397203bb42452b1b4cdf3854074d6fbae0",
    "transactionHash": "0x0e930988b327c88de408048f0a539f54b67d74c1798f572adfd0955fc720e751",
    "logs": [
      {
        "transactionIndex": 113,
        "blockNumber": 8706386,
        "transactionHash": "0x0e930988b327c88de408048f0a539f54b67d74c1798f572adfd0955fc720e751",
        "address": "0xeA394E7cC51C8ce6c18007a6c2B4406f3Fae91e1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a363ad8360989178e4e174e56dcc192141bea021"
        ],
        "data": "0x",
        "logIndex": 195,
        "blockHash": "0x7fb7fbf48ec1d141954989ba3a4602397203bb42452b1b4cdf3854074d6fbae0"
      }
    ],
    "blockNumber": 8706386,
    "cumulativeGasUsed": "20090503",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE09eA9cBc76b0105dd32312D4a2E37B4d4c7a43c",
    "0xc9b4E422Bc97DC073c917E2d01b9B3D3F269f467"
  ],
  "numDeployments": 1,
  "solcInputHash": "9016a7babf6ab09ea21555a3f6a82114",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"team1_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"team2_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipSaleState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipWhitelistState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRevealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof_\",\"type\":\"bytes32[]\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftBaseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleIsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nftBaseURI_\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingPrice_\",\"type\":\"uint256\"}],\"name\":\"setListingPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxPerWallet_\",\"type\":\"uint256\"}],\"name\":\"setMaxPerWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setRevealed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root_\",\"type\":\"bytes32\"}],\"name\":\"setRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"team\",\"type\":\"address[]\"}],\"name\":\"setTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"unrevealedURI_\",\"type\":\"string\"}],\"name\":\"setUnrevealedURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"team1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"team2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"teamMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unrevealedURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"totalSupply()\":{\"details\":\"Returns the total number of tokens in existence. Burned tokens will reduce the count.  To get the total number of tokens minted, please see `_totalMinted`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ApprovalCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"ApprovalQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"ApprovalToCurrentOwner()\":[{\"notice\":\"The caller cannot approve to the current owner.\"}],\"ApproveToCaller()\":[{\"notice\":\"The caller cannot approve to their own address.\"}],\"BalanceQueryForZeroAddress()\":[{\"notice\":\"Cannot query the balance for the zero address.\"}],\"MintToZeroAddress()\":[{\"notice\":\"Cannot mint to the zero address.\"}],\"MintZeroQuantity()\":[{\"notice\":\"The quantity of tokens minted must be more than zero.\"}],\"OwnerQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"TransferCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"TransferFromIncorrectOwner()\":[{\"notice\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"notice\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"notice\":\"Cannot transfer to the zero address.\"}],\"URIQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}]},\"kind\":\"user\",\"methods\":{},\"notice\":\"_ (`-.    ('-.     _ (`-.    ('-.  _ .-') _           _  .-')        (`-.      ('-.         ( (OO  ) _(  OO)   ( (OO  ) _(  OO)( (  OO) )         ( \\\\( -O )     _(OO  )_  _(  OO)        _.`     \\\\(,------. _.`     \\\\(,------.\\\\     .'_   ,-.-') ,------. ,--(_/   ,. \\\\(,------.       (__...--'' |  .---'(__...--'' |  .---',`'--..._)  |  |OO)|   /`. '\\\\   \\\\   /(__/ |  .---'       |  /  | | |  |     |  /  | | |  |    |  |  \\\\  '  |  |  \\\\|  /  | | \\\\   \\\\ /   /  |  |           |  |_.' |(|  '--.  |  |_.' |(|  '--. |  |   ' |  |  |(_/|  |_.' |  \\\\   '   /, (|  '--.        |  .___.' |  .--'  |  .___.' |  .--' |  |   / : ,|  |_.'|  .  '.'   \\\\     /__) |  .--'        |  |      |  `---. |  |      |  `---.|  '--'  /(_|  |   |  |\\\\  \\\\     \\\\   /     |  `---.       `--'      `------' `--'      `------'`-------'   `--'   `--' '--'     `-'      `------'      \",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PepeDrive.sol\":\"PepeDrive\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\\n     * consuming from one or the other at each step according to the instructions given by\\n     * `proofFlags`.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x596ed72a251d391b814a4aa19d7acb02ebdcc92ba27d3fff74a6f0c158b12ab7\",\"license\":\"MIT\"},\"contracts/PepeDrive.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"erc721a/contracts/ERC721A.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\r\\n\\r\\n/**\\r\\n   _ (`-.    ('-.     _ (`-.    ('-.  _ .-') _           _  .-')        (`-.      ('-.        \\r\\n  ( (OO  ) _(  OO)   ( (OO  ) _(  OO)( (  OO) )         ( \\\\( -O )     _(OO  )_  _(  OO)       \\r\\n _.`     \\\\(,------. _.`     \\\\(,------.\\\\     .'_   ,-.-') ,------. ,--(_/   ,. \\\\(,------.      \\r\\n(__...--'' |  .---'(__...--'' |  .---',`'--..._)  |  |OO)|   /`. '\\\\   \\\\   /(__/ |  .---'      \\r\\n |  /  | | |  |     |  /  | | |  |    |  |  \\\\  '  |  |  \\\\|  /  | | \\\\   \\\\ /   /  |  |          \\r\\n |  |_.' |(|  '--.  |  |_.' |(|  '--. |  |   ' |  |  |(_/|  |_.' |  \\\\   '   /, (|  '--.       \\r\\n |  .___.' |  .--'  |  .___.' |  .--' |  |   / : ,|  |_.'|  .  '.'   \\\\     /__) |  .--'       \\r\\n |  |      |  `---. |  |      |  `---.|  '--'  /(_|  |   |  |\\\\  \\\\     \\\\   /     |  `---.      \\r\\n `--'      `------' `--'      `------'`-------'   `--'   `--' '--'     `-'      `------'      \\r\\n */\\r\\n\\r\\ncontract PepeDrive is ERC721A, Ownable {\\r\\n    uint256 public MAX_AMOUNT = 3333;\\r\\n    bool public saleIsActive = false;\\r\\n    bool public whitelistActive = true;\\r\\n    uint256 public listingPrice = 0.069 ether;\\r\\n    bytes32 private root;\\r\\n    string public nftBaseURI;\\r\\n    string public unrevealedURI;\\r\\n    bool public isRevealed = false;\\r\\n\\r\\n    uint256 maxPerWallet = 1;\\r\\n    mapping(address => uint256) public balances;\\r\\n    address public team1; //0x7454Fc06fA6AF3e9E79CEb863d22C732E835c948;\\r\\n    address public team2; //0x76daBcD5b66de4398b7222a1eA34c1935A5488fA;\\r\\n\\r\\n    mapping(address => bool) public _claimed;\\r\\n\\r\\n    constructor(address team1_, address team2_) ERC721A(\\\"PepeDrive\\\", \\\"PD\\\") {\\r\\n        team1 = team1_;\\r\\n        team2 = team2_;\\r\\n    }\\r\\n\\r\\n    function setRoot(bytes32 root_) public onlyOwner {\\r\\n        root = root_;\\r\\n    }\\r\\n\\r\\n    function setTeam(address[] calldata team) public onlyOwner {\\r\\n        require(team.length == 2, \\\"Need two team members\\\");\\r\\n        team1 = team[0];\\r\\n        team2 = team[1];\\r\\n    }\\r\\n\\r\\n    function setMaxPerWallet(uint256 maxPerWallet_) public onlyOwner {\\r\\n        maxPerWallet = maxPerWallet_;\\r\\n    }\\r\\n\\r\\n    function setBaseURI(string calldata nftBaseURI_) public onlyOwner {\\r\\n        nftBaseURI = nftBaseURI_;\\r\\n    }\\r\\n\\r\\n    function setUnrevealedURI(string calldata unrevealedURI_) public onlyOwner {\\r\\n        unrevealedURI = unrevealedURI_;\\r\\n    }\\r\\n\\r\\n    function tokenURI(\\r\\n        uint256 tokenId_\\r\\n    ) public view override returns (string memory) {\\r\\n        if (!isRevealed) {\\r\\n            return unrevealedURI;\\r\\n        }\\r\\n\\r\\n        return super.tokenURI(tokenId_);\\r\\n    }\\r\\n\\r\\n    function _baseURI() internal view virtual override returns (string memory) {\\r\\n        return nftBaseURI;\\r\\n    }\\r\\n\\r\\n    function setRevealed() public onlyOwner {\\r\\n        isRevealed = !isRevealed;\\r\\n    }\\r\\n\\r\\n    function flipSaleState() public onlyOwner {\\r\\n        saleIsActive = !saleIsActive;\\r\\n    }\\r\\n\\r\\n    function flipWhitelistState() public onlyOwner {\\r\\n        whitelistActive = !whitelistActive;\\r\\n    }\\r\\n\\r\\n    function setListingPrice(uint256 listingPrice_) public onlyOwner {\\r\\n        listingPrice = listingPrice_;\\r\\n    }\\r\\n\\r\\n    function withdraw() public onlyOwner {\\r\\n        uint256 _balance = address(this).balance;\\r\\n        uint256 split = (_balance * 50) / 100;\\r\\n        (bool os, ) = payable(team1).call{value: split}(\\\"\\\");\\r\\n        require(os);\\r\\n\\r\\n        (os, ) = payable(team2).call{value: split}(\\\"\\\");\\r\\n        require(os);\\r\\n    }\\r\\n\\r\\n    function mint(uint256 amount_, bytes32[] calldata proof_) public payable {\\r\\n        require(saleIsActive, \\\"Sale is not open\\\");\\r\\n        require(totalSupply() + amount_ <= MAX_AMOUNT, \\\"Supply is limited\\\");\\r\\n        require(\\r\\n            balances[msg.sender] + amount_ <= maxPerWallet,\\r\\n            \\\"Wallet limit reached\\\"\\r\\n        );\\r\\n        require(\\r\\n            msg.value >= (listingPrice * amount_),\\r\\n            \\\"Not enough funds submitted\\\"\\r\\n        );\\r\\n\\r\\n        if (whitelistActive) {\\r\\n            bytes32 _leaf = keccak256(abi.encodePacked(msg.sender));\\r\\n            require(MerkleProof.verify(proof_, root, _leaf), \\\"Invalid proof\\\");\\r\\n        }\\r\\n        balances[msg.sender] += amount_;\\r\\n        _safeMint(msg.sender, amount_);\\r\\n    }\\r\\n\\r\\n    function teamMint(uint256 amount_) public onlyOwner {\\r\\n        require(totalSupply() + amount_ <= MAX_AMOUNT, \\\"Supply is limited\\\");\\r\\n        balances[owner()] += amount_;\\r\\n        _safeMint(owner(), amount_);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x505f72a6a23041babfa908ada5451738626b3c11fe336b76d9894d6045ff828b\",\"license\":\"MIT\"},\"erc721a/contracts/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.0.0\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport './IERC721A.sol';\\n\\n/**\\n * @dev ERC721 token receiver interface.\\n */\\ninterface ERC721A__IERC721Receiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension. Built to optimize for lower gas during batch mints.\\n *\\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\\n *\\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n *\\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721A is IERC721A {\\n    // Mask of an entry in packed address data.\\n    uint256 private constant BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\\n\\n    // The bit position of `numberMinted` in packed address data.\\n    uint256 private constant BITPOS_NUMBER_MINTED = 64;\\n\\n    // The bit position of `numberBurned` in packed address data.\\n    uint256 private constant BITPOS_NUMBER_BURNED = 128;\\n\\n    // The bit position of `aux` in packed address data.\\n    uint256 private constant BITPOS_AUX = 192;\\n\\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\\n    uint256 private constant BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\\n\\n    // The bit position of `startTimestamp` in packed ownership.\\n    uint256 private constant BITPOS_START_TIMESTAMP = 160;\\n\\n    // The bit mask of the `burned` bit in packed ownership.\\n    uint256 private constant BITMASK_BURNED = 1 << 224;\\n    \\n    // The bit position of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant BITPOS_NEXT_INITIALIZED = 225;\\n\\n    // The bit mask of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant BITMASK_NEXT_INITIALIZED = 1 << 225;\\n\\n    // The tokenId of the next token to be minted.\\n    uint256 private _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 private _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned.\\n    // See `_packedOwnershipOf` implementation for details.\\n    //\\n    // Bits Layout:\\n    // - [0..159]   `addr`\\n    // - [160..223] `startTimestamp`\\n    // - [224]      `burned`\\n    // - [225]      `nextInitialized`\\n    mapping(uint256 => uint256) private _packedOwnerships;\\n\\n    // Mapping owner address to address data.\\n    //\\n    // Bits Layout:\\n    // - [0..63]    `balance`\\n    // - [64..127]  `numberMinted`\\n    // - [128..191] `numberBurned`\\n    // - [192..255] `aux`\\n    mapping(address => uint256) private _packedAddressData;\\n\\n    // Mapping from token ID to approved address.\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    /**\\n     * @dev Returns the starting token ID. \\n     * To change the starting token ID, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Returns the next token ID to be minted.\\n     */\\n    function _nextTokenId() internal view returns (uint256) {\\n        return _currentIndex;\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count. \\n     * To get the total number of tokens minted, please see `_totalMinted`.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than `_currentIndex - _startTokenId()` times.\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view returns (uint256) {\\n        // Counter underflow is impossible as _currentIndex does not decrement,\\n        // and it is initialized to `_startTokenId()`\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens burned.\\n     */\\n    function _totalBurned() internal view returns (uint256) {\\n        return _burnCounter;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        // The interface IDs are constants representing the first 4 bytes of the XOR of\\n        // all function selectors in the interface. See: https://eips.ethereum.org/EIPS/eip-165\\n        // e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return _packedAddressData[owner] & BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> BITPOS_NUMBER_MINTED) & BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> BITPOS_NUMBER_BURNED) & BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return uint64(_packedAddressData[owner] >> BITPOS_AUX);\\n    }\\n\\n    /**\\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal {\\n        uint256 packed = _packedAddressData[owner];\\n        uint256 auxCasted;\\n        assembly { // Cast aux without masking.\\n            auxCasted := aux\\n        }\\n        packed = (packed & BITMASK_AUX_COMPLEMENT) | (auxCasted << BITPOS_AUX);\\n        _packedAddressData[owner] = packed;\\n    }\\n\\n    /**\\n     * Returns the packed ownership data of `tokenId`.\\n     */\\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr)\\n                if (curr < _currentIndex) {\\n                    uint256 packed = _packedOwnerships[curr];\\n                    // If not burned.\\n                    if (packed & BITMASK_BURNED == 0) {\\n                        // Invariant:\\n                        // There will always be an ownership that has an address and is not burned\\n                        // before an ownership that does not have an address and is not burned.\\n                        // Hence, curr will not underflow.\\n                        //\\n                        // We can directly compare the packed value.\\n                        // If the address is zero, packed is zero.\\n                        while (packed == 0) {\\n                            packed = _packedOwnerships[--curr];\\n                        }\\n                        return packed;\\n                    }\\n                }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * Returns the unpacked `TokenOwnership` struct from `packed`.\\n     */\\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\\n        ownership.addr = address(uint160(packed));\\n        ownership.startTimestamp = uint64(packed >> BITPOS_START_TIMESTAMP);\\n        ownership.burned = packed & BITMASK_BURNED != 0;\\n    }\\n\\n    /**\\n     * Returns the unpacked `TokenOwnership` struct at `index`.\\n     */\\n    function _ownershipAt(uint256 index) internal view returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnerships[index]);\\n    }\\n\\n    /**\\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\\n     */\\n    function _initializeOwnershipAt(uint256 index) internal {\\n        if (_packedOwnerships[index] == 0) {\\n            _packedOwnerships[index] = _packedOwnershipOf(index);\\n        }\\n    }\\n\\n    /**\\n     * Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return address(uint160(_packedOwnershipOf(tokenId)));\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    /**\\n     * @dev Casts the address to uint256 without masking.\\n     */\\n    function _addressToUint256(address value) private pure returns (uint256 result) {\\n        assembly {\\n            result := value\\n        }\\n    }\\n\\n    /**\\n     * @dev Casts the boolean to uint256 without branching.\\n     */\\n    function _boolToUint256(bool value) private pure returns (uint256 result) {\\n        assembly {\\n            result := value\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public override {\\n        address owner = address(uint160(_packedOwnershipOf(tokenId)));\\n        if (to == owner) revert ApprovalToCurrentOwner();\\n\\n        if (_msgSenderERC721A() != owner)\\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\\n                revert ApprovalCallerNotOwnerNorApproved();\\n            }\\n\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        if (operator == _msgSenderERC721A()) revert ApproveToCaller();\\n\\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n        if (to.code.length != 0)\\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            }\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return\\n            _startTokenId() <= tokenId &&\\n            tokenId < _currentIndex && // If within bounds,\\n            _packedOwnerships[tokenId] & BITMASK_BURNED == 0; // and not burned.\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\\n     */\\n    function _safeMint(address to, uint256 quantity) internal {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement\\n     *   {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the balance and number minted.\\n            _packedAddressData[to] += quantity * ((1 << BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] =\\n                _addressToUint256(to) |\\n                (block.timestamp << BITPOS_START_TIMESTAMP) |\\n                (_boolToUint256(quantity == 1) << BITPOS_NEXT_INITIALIZED);\\n\\n            uint256 updatedIndex = startTokenId;\\n            uint256 end = updatedIndex + quantity;\\n\\n            if (to.code.length != 0) {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex);\\n                    if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (updatedIndex < end);\\n                // Reentrancy protection\\n                if (_currentIndex != startTokenId) revert();\\n            } else {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex++);\\n                } while (updatedIndex < end);\\n            }\\n            _currentIndex = updatedIndex;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 quantity) internal {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the balance and number minted.\\n            _packedAddressData[to] += quantity * ((1 << BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] =\\n                _addressToUint256(to) |\\n                (block.timestamp << BITPOS_START_TIMESTAMP) |\\n                (_boolToUint256(quantity == 1) << BITPOS_NEXT_INITIALIZED);\\n\\n            uint256 updatedIndex = startTokenId;\\n            uint256 end = updatedIndex + quantity;\\n\\n            do {\\n                emit Transfer(address(0), to, updatedIndex++);\\n            } while (updatedIndex < end);\\n\\n            _currentIndex = updatedIndex;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) private {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\\n\\n        bool isApprovedOrOwner = (_msgSenderERC721A() == from ||\\n            isApprovedForAll(from, _msgSenderERC721A()) ||\\n            getApproved(tokenId) == _msgSenderERC721A());\\n\\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        delete _tokenApprovals[tokenId];\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            // We can directly increment and decrement the balances.\\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\\n\\n            // Updates:\\n            // - `address` to the next owner.\\n            // - `startTimestamp` to the timestamp of transfering.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] =\\n                _addressToUint256(to) |\\n                (block.timestamp << BITPOS_START_TIMESTAMP) |\\n                BITMASK_NEXT_INITIALIZED;\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_burn(tokenId, false)`.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        address from = address(uint160(prevOwnershipPacked));\\n\\n        if (approvalCheck) {\\n            bool isApprovedOrOwner = (_msgSenderERC721A() == from ||\\n                isApprovedForAll(from, _msgSenderERC721A()) ||\\n                getApproved(tokenId) == _msgSenderERC721A());\\n\\n            if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        delete _tokenApprovals[tokenId];\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance -= 1`.\\n            // - `numberBurned += 1`.\\n            //\\n            // We can directly decrement the balance, and increment the number burned.\\n            // This is equivalent to `packed -= 1; packed += 1 << BITPOS_NUMBER_BURNED;`.\\n            _packedAddressData[from] += (1 << BITPOS_NUMBER_BURNED) - 1;\\n\\n            // Updates:\\n            // - `address` to the last owner.\\n            // - `startTimestamp` to the timestamp of burning.\\n            // - `burned` to `true`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] =\\n                _addressToUint256(from) |\\n                (block.timestamp << BITPOS_START_TIMESTAMP) |\\n                BITMASK_BURNED | \\n                BITMASK_NEXT_INITIALIZED;\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\\n            bytes4 retval\\n        ) {\\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n     * minting.\\n     * And also called after one token has been burned.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Returns the message sender (defaults to `msg.sender`).\\n     *\\n     * If you are writing GSN compatible contracts, you need to override this function.\\n     */\\n    function _msgSenderERC721A() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function _toString(uint256 value) internal pure returns (string memory ptr) {\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), \\n            // but we allocate 128 bytes to keep the free memory pointer 32-byte word aliged.\\n            // We will need 1 32-byte word to store the length, \\n            // and 3 32-byte words to store a maximum of 78 digits. Total: 32 + 3 * 32 = 128.\\n            ptr := add(mload(0x40), 128)\\n            // Update the free memory pointer to allocate.\\n            mstore(0x40, ptr)\\n\\n            // Cache the end of the memory to calculate the length later.\\n            let end := ptr\\n\\n            // We write the string from the rightmost digit to the leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            // Costs a bit more than early returning for the zero case,\\n            // but cheaper in terms of deployment and overall runtime costs.\\n            for { \\n                // Initialize and perform the first pass without check.\\n                let temp := value\\n                // Move the pointer 1 byte leftwards to point to an empty character slot.\\n                ptr := sub(ptr, 1)\\n                // Write the character to the pointer. 48 is the ASCII index of '0'.\\n                mstore8(ptr, add(48, mod(temp, 10)))\\n                temp := div(temp, 10)\\n            } temp { \\n                // Keep dividing `temp` until zero.\\n                temp := div(temp, 10)\\n            } { // Body of the for loop.\\n                ptr := sub(ptr, 1)\\n                mstore8(ptr, add(48, mod(temp, 10)))\\n            }\\n            \\n            let length := sub(end, ptr)\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\n            ptr := sub(ptr, 32)\\n            // Store the length.\\n            mstore(ptr, length)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xee54d83d9ad60a9e092f5c88ed0c46013c5946293587dc135650cc778cd752ce\",\"license\":\"MIT\"},\"erc721a/contracts/IERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.0.0\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of an ERC721A compliant contract.\\n */\\ninterface IERC721A {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * The caller cannot approve to their own address.\\n     */\\n    error ApproveToCaller();\\n\\n    /**\\n     * The caller cannot approve to the current owner.\\n     */\\n    error ApprovalToCurrentOwner();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     *\\n     * Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // ==============================\\n    //            IERC165\\n    // ==============================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // ==============================\\n    //            IERC721\\n    // ==============================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // ==============================\\n    //        IERC721Metadata\\n    // ==============================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x667ae6351b1bc61b64f758a2b31ca0e861bb717faebf5ee3fcea17c5c9fe8179\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052610d05600955600a805461ffff191661010017905566f5232269808000600b55600f805460ff1916905560016010553480156200004057600080fd5b506040516200269838038062002698833981016040819052620000639162000173565b6040518060400160405280600981526020016850657065447269766560b81b81525060405180604001604052806002815260200161141160f21b8152508160029081620000b1919062000250565b506003620000c0828262000250565b50506000805550620000d23362000104565b601280546001600160a01b039384166001600160a01b031991821617909155601380549290931691161790556200031c565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80516001600160a01b03811681146200016e57600080fd5b919050565b600080604083850312156200018757600080fd5b620001928362000156565b9150620001a26020840162000156565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620001d657607f821691505b602082108103620001f757634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200024b57600081815260208120601f850160051c81016020861015620002265750805b601f850160051c820191505b81811015620002475782815560010162000232565b5050505b505050565b81516001600160401b038111156200026c576200026c620001ab565b62000284816200027d8454620001c1565b84620001fd565b602080601f831160018114620002bc5760008415620002a35750858301515b600019600386901b1c1916600185901b17855562000247565b600085815260208120601f198616915b82811015620002ed57888601518255948401946001909101908401620002cc565b50858210156200030c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61236c806200032c6000396000f3fe6080604052600436106102bb5760003560e01c80637c726b691161016e578063dab5f340116100cb578063e985e9c51161007f578063f2fde38b11610064578063f2fde38b1461075d578063f6fa26ab1461077d578063fe2c7fee1461079257600080fd5b8063e985e9c5146106fa578063eb8d24441461074357600080fd5b8063dd896a1c116100b0578063dd896a1c1461068a578063e268e4d3146106ba578063e612c0ad146106da57600080fd5b8063dab5f34014610655578063db8116b71461067557600080fd5b8063b88d4fde11610122578063c78f19f911610107578063c78f19f914610609578063c87b56dd1461061f578063d40dc8701461063f57600080fd5b8063b88d4fde146105d6578063ba41b0c6146105f657600080fd5b80638da5cb5b116101535780638da5cb5b1461058357806395d89b41146105a1578063a22cb465146105b657600080fd5b80637c726b69146105435780638c8d2ede1461056357600080fd5b80633b749b871161021c57806355f804b3116101d05780637035bf18116101b55780637035bf18146104f957806370a082311461050e578063715018a61461052e57600080fd5b806355f804b3146104b95780636352211e146104d957600080fd5b80633ccfd60b116102015780633ccfd60b1461046a57806342842e0e1461047f57806354214f691461049f57600080fd5b80633b749b87146104355780633bd649681461045557600080fd5b806318160ddd1161027357806327e235e31161025857806327e235e3146103d35780632fbba1151461040057806334918dfd1461042057600080fd5b806318160ddd1461039057806323b872dd146103b357600080fd5b806306fdde03116102a457806306fdde0314610314578063081812fc14610336578063095ea7b31461036e57600080fd5b806301ffc9a7146102c057806302ce5813146102f5575b600080fd5b3480156102cc57600080fd5b506102e06102db366004611cf1565b6107b2565b60405190151581526020015b60405180910390f35b34801561030157600080fd5b50600a546102e090610100900460ff1681565b34801561032057600080fd5b50610329610897565b6040516102ec9190611d5e565b34801561034257600080fd5b50610356610351366004611d71565b610929565b6040516001600160a01b0390911681526020016102ec565b34801561037a57600080fd5b5061038e610389366004611da6565b610986565b005b34801561039c57600080fd5b50600154600054035b6040519081526020016102ec565b3480156103bf57600080fd5b5061038e6103ce366004611dd0565b610ab4565b3480156103df57600080fd5b506103a56103ee366004611e0c565b60116020526000908152604090205481565b34801561040c57600080fd5b5061038e61041b366004611d71565b610ac4565b34801561042c57600080fd5b5061038e610b9e565b34801561044157600080fd5b5061038e610450366004611e73565b610bba565b34801561046157600080fd5b5061038e610cc0565b34801561047657600080fd5b5061038e610cdc565b34801561048b57600080fd5b5061038e61049a366004611dd0565b610dc5565b3480156104ab57600080fd5b50600f546102e09060ff1681565b3480156104c557600080fd5b5061038e6104d4366004611eb5565b610de0565b3480156104e557600080fd5b506103566104f4366004611d71565b610df5565b34801561050557600080fd5b50610329610e00565b34801561051a57600080fd5b506103a5610529366004611e0c565b610e8e565b34801561053a57600080fd5b5061038e610ef6565b34801561054f57600080fd5b5061038e61055e366004611d71565b610f0a565b34801561056f57600080fd5b50601254610356906001600160a01b031681565b34801561058f57600080fd5b506008546001600160a01b0316610356565b3480156105ad57600080fd5b50610329610f17565b3480156105c257600080fd5b5061038e6105d1366004611f27565b610f26565b3480156105e257600080fd5b5061038e6105f1366004611f79565b610fd4565b61038e610604366004612055565b61101e565b34801561061557600080fd5b506103a5600b5481565b34801561062b57600080fd5b5061032961063a366004611d71565b6112bc565b34801561064b57600080fd5b506103a560095481565b34801561066157600080fd5b5061038e610670366004611d71565b611364565b34801561068157600080fd5b50610329611371565b34801561069657600080fd5b506102e06106a5366004611e0c565b60146020526000908152604090205460ff1681565b3480156106c657600080fd5b5061038e6106d5366004611d71565b61137e565b3480156106e657600080fd5b50601354610356906001600160a01b031681565b34801561070657600080fd5b506102e06107153660046120a1565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b34801561074f57600080fd5b50600a546102e09060ff1681565b34801561076957600080fd5b5061038e610778366004611e0c565b61138b565b34801561078957600080fd5b5061038e611418565b34801561079e57600080fd5b5061038e6107ad366004611eb5565b61145a565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316148061084557507f80ac58cd000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b8061089157507f5b5e139f000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6060600280546108a6906120d4565b80601f01602080910402602001604051908101604052809291908181526020018280546108d2906120d4565b801561091f5780601f106108f45761010080835404028352916020019161091f565b820191906000526020600020905b81548152906001019060200180831161090257829003601f168201915b5050505050905090565b60006109348261146f565b61096a576040517fcf4700e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b6000610991826114af565b9050806001600160a01b0316836001600160a01b0316036109de576040517f943f7b8c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336001600160a01b03821614610a4b576001600160a01b038116600090815260076020908152604080832033845290915290205460ff16610a4b576040517fcfb3b94200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600082815260066020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b610abf83838361154f565b505050565b610acc611787565b60095481610add6001546000540390565b610ae79190612124565b1115610b3a5760405162461bcd60e51b815260206004820152601160248201527f537570706c79206973206c696d6974656400000000000000000000000000000060448201526064015b60405180910390fd5b8060116000610b516008546001600160a01b031690565b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254610b809190612124565b9091555050600854610b9b906001600160a01b0316826117e1565b50565b610ba6611787565b600a805460ff19811660ff90911615179055565b610bc2611787565b60028114610c125760405162461bcd60e51b815260206004820152601560248201527f4e6565642074776f207465616d206d656d6265727300000000000000000000006044820152606401610b31565b81816000818110610c2557610c25612137565b9050602002016020810190610c3a9190611e0c565b6012805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039290921691909117905581816001818110610c7a57610c7a612137565b9050602002016020810190610c8f9190611e0c565b6013805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03929092169190911790555050565b610cc8611787565b600f805460ff19811660ff90911615179055565b610ce4611787565b4760006064610cf483603261214d565b610cfe9190612164565b6012546040519192506000916001600160a01b039091169083908381818185875af1925050503d8060008114610d50576040519150601f19603f3d011682016040523d82523d6000602084013e610d55565b606091505b5050905080610d6357600080fd5b6013546040516001600160a01b03909116908390600081818185875af1925050503d8060008114610db0576040519150601f19603f3d011682016040523d82523d6000602084013e610db5565b606091505b50508091505080610abf57600080fd5b610abf83838360405180602001604052806000815250610fd4565b610de8611787565b600d610abf8284836121d4565b6000610891826114af565b600e8054610e0d906120d4565b80601f0160208091040260200160405190810160405280929190818152602001828054610e39906120d4565b8015610e865780601f10610e5b57610100808354040283529160200191610e86565b820191906000526020600020905b815481529060010190602001808311610e6957829003601f168201915b505050505081565b60006001600160a01b038216610ed0576040517f8f4eb60400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b506001600160a01b031660009081526005602052604090205467ffffffffffffffff1690565b610efe611787565b610f0860006117ff565b565b610f12611787565b600b55565b6060600380546108a6906120d4565b336001600160a01b03831603610f68576040517fb06307db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610fdf84848461154f565b6001600160a01b0383163b1561101857610ffb8484848461185e565b611018576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b600a5460ff166110705760405162461bcd60e51b815260206004820152601060248201527f53616c65206973206e6f74206f70656e000000000000000000000000000000006044820152606401610b31565b600954836110816001546000540390565b61108b9190612124565b11156110d95760405162461bcd60e51b815260206004820152601160248201527f537570706c79206973206c696d697465640000000000000000000000000000006044820152606401610b31565b601054336000908152601160205260409020546110f7908590612124565b11156111455760405162461bcd60e51b815260206004820152601460248201527f57616c6c6574206c696d697420726561636865640000000000000000000000006044820152606401610b31565b82600b54611153919061214d565b3410156111a25760405162461bcd60e51b815260206004820152601a60248201527f4e6f7420656e6f7567682066756e6473207375626d69747465640000000000006044820152606401610b31565b600a54610100900460ff161561128d576040517fffffffffffffffffffffffffffffffffffffffff0000000000000000000000003360601b16602082015260009060340160405160208183030381529060405280519060200120905061123f83838080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050600c549150849050611993565b61128b5760405162461bcd60e51b815260206004820152600d60248201527f496e76616c69642070726f6f66000000000000000000000000000000000000006044820152606401610b31565b505b33600090815260116020526040812080548592906112ac908490612124565b90915550610abf905033846117e1565b600f5460609060ff1661135b57600e80546112d6906120d4565b80601f0160208091040260200160405190810160405280929190818152602001828054611302906120d4565b801561134f5780601f106113245761010080835404028352916020019161134f565b820191906000526020600020905b81548152906001019060200180831161133257829003601f168201915b50505050509050919050565b610891826119a9565b61136c611787565b600c55565b600d8054610e0d906120d4565b611386611787565b601055565b611393611787565b6001600160a01b03811661140f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610b31565b610b9b816117ff565b611420611787565b600a80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff81166101009182900460ff1615909102179055565b611462611787565b600e610abf8284836121d4565b60008054821080156108915750506000908152600460205260409020547c0100000000000000000000000000000000000000000000000000000000161590565b60008160005481101561151d57600081815260046020526040812054907c01000000000000000000000000000000000000000000000000000000008216900361151b575b806000036115145750600019016000818152600460205260409020546114f3565b9392505050565b505b6040517fdf2d9b4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061155a826114af565b9050836001600160a01b0316816001600160a01b0316146115a7576040517fa114810000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000336001600160a01b03861614806115e357506001600160a01b038516600090815260076020908152604080832033845290915290205460ff165b806115fe5750336115f384610929565b6001600160a01b0316145b905080611637576040517f59c896be00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038416611677576040517fea553b3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000838152600660209081526040808320805473ffffffffffffffffffffffffffffffffffffffff191690556001600160a01b0388811684526005835281842080546000190190558716835280832080546001019055858352600490915281207c02000000000000000000000000000000000000000000000000000000004260a01b871781179091558316900361173e5760018301600081815260046020526040812054900361173c57600054811461173c5760008181526004602052604090208390555b505b82846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b5050505050565b6008546001600160a01b03163314610f085760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b31565b6117fb828260405180602001604052806000815250611a45565b5050565b600880546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040517f150b7a020000000000000000000000000000000000000000000000000000000081526000906001600160a01b0385169063150b7a02906118ac903390899088908890600401612294565b6020604051808303816000875af19250505080156118e7575060408051601f3d908101601f191682019092526118e4918101906122d0565b60015b611945573d808015611915576040519150601f19603f3d011682016040523d82523d6000602084013e61191a565b606091505b50805160000361193d576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050949350505050565b6000826119a08584611bec565b14949350505050565b60606119b48261146f565b6119ea576040517fa14c4b5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006119f4611c39565b90508051600003611a145760405180602001604052806000815250611514565b80611a1e84611c48565b604051602001611a2f9291906122ed565b6040516020818303038152906040529392505050565b6000546001600160a01b038416611a88576040517f2e07630000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600003611ac2576040517fb562e8dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03841660008181526005602090815260408083208054680100000000000000018902019055848352600490915290204260a01b86176001861460e11b1790558190818501903b15611b97575b60405182906001600160a01b038816906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4611b60600087848060010195508761185e565b611b7d576040516368d2bf6b60e11b815260040160405180910390fd5b808210611b15578260005414611b9257600080fd5b611bdc565b5b6040516001830192906001600160a01b038816906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4808210611b98575b5060009081556110189085838684565b600081815b8451811015611c3157611c1d82868381518110611c1057611c10612137565b6020026020010151611c97565b915080611c298161231c565b915050611bf1565b509392505050565b6060600d80546108a6906120d4565b604080516080810191829052607f0190826030600a8206018353600a90045b8015611c8557600183039250600a81066030018353600a9004611c67565b50819003601f19909101908152919050565b6000818310611cb3576000828152602084905260409020611514565b5060009182526020526040902090565b7fffffffff0000000000000000000000000000000000000000000000000000000081168114610b9b57600080fd5b600060208284031215611d0357600080fd5b813561151481611cc3565b60005b83811015611d29578181015183820152602001611d11565b50506000910152565b60008151808452611d4a816020860160208601611d0e565b601f01601f19169290920160200192915050565b6020815260006115146020830184611d32565b600060208284031215611d8357600080fd5b5035919050565b80356001600160a01b0381168114611da157600080fd5b919050565b60008060408385031215611db957600080fd5b611dc283611d8a565b946020939093013593505050565b600080600060608486031215611de557600080fd5b611dee84611d8a565b9250611dfc60208501611d8a565b9150604084013590509250925092565b600060208284031215611e1e57600080fd5b61151482611d8a565b60008083601f840112611e3957600080fd5b50813567ffffffffffffffff811115611e5157600080fd5b6020830191508360208260051b8501011115611e6c57600080fd5b9250929050565b60008060208385031215611e8657600080fd5b823567ffffffffffffffff811115611e9d57600080fd5b611ea985828601611e27565b90969095509350505050565b60008060208385031215611ec857600080fd5b823567ffffffffffffffff80821115611ee057600080fd5b818501915085601f830112611ef457600080fd5b813581811115611f0357600080fd5b866020828501011115611f1557600080fd5b60209290920196919550909350505050565b60008060408385031215611f3a57600080fd5b611f4383611d8a565b915060208301358015158114611f5857600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215611f8f57600080fd5b611f9885611d8a565b9350611fa660208601611d8a565b925060408501359150606085013567ffffffffffffffff80821115611fca57600080fd5b818701915087601f830112611fde57600080fd5b813581811115611ff057611ff0611f63565b604051601f8201601f19908116603f0116810190838211818310171561201857612018611f63565b816040528281528a602084870101111561203157600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060006040848603121561206a57600080fd5b83359250602084013567ffffffffffffffff81111561208857600080fd5b61209486828701611e27565b9497909650939450505050565b600080604083850312156120b457600080fd5b6120bd83611d8a565b91506120cb60208401611d8a565b90509250929050565b600181811c908216806120e857607f821691505b60208210810361210857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156108915761089161210e565b634e487b7160e01b600052603260045260246000fd5b80820281158282048414176108915761089161210e565b60008261218157634e487b7160e01b600052601260045260246000fd5b500490565b601f821115610abf57600081815260208120601f850160051c810160208610156121ad5750805b601f850160051c820191505b818110156121cc578281556001016121b9565b505050505050565b67ffffffffffffffff8311156121ec576121ec611f63565b612200836121fa83546120d4565b83612186565b6000601f841160018114612234576000851561221c5750838201355b600019600387901b1c1916600186901b178355611780565b600083815260209020601f19861690835b828110156122655786850135825560209485019460019092019101612245565b50868210156122825760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b60006001600160a01b038087168352808616602084015250836040830152608060608301526122c66080830184611d32565b9695505050505050565b6000602082840312156122e257600080fd5b815161151481611cc3565b600083516122ff818460208801611d0e565b835190830190612313818360208801611d0e565b01949350505050565b6000600019820361232f5761232f61210e565b506001019056fea2646970667358221220baf0578dae328b6e1f7698f54842ec8c469d4ad799ab356662cf649845fa43c864736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106102bb5760003560e01c80637c726b691161016e578063dab5f340116100cb578063e985e9c51161007f578063f2fde38b11610064578063f2fde38b1461075d578063f6fa26ab1461077d578063fe2c7fee1461079257600080fd5b8063e985e9c5146106fa578063eb8d24441461074357600080fd5b8063dd896a1c116100b0578063dd896a1c1461068a578063e268e4d3146106ba578063e612c0ad146106da57600080fd5b8063dab5f34014610655578063db8116b71461067557600080fd5b8063b88d4fde11610122578063c78f19f911610107578063c78f19f914610609578063c87b56dd1461061f578063d40dc8701461063f57600080fd5b8063b88d4fde146105d6578063ba41b0c6146105f657600080fd5b80638da5cb5b116101535780638da5cb5b1461058357806395d89b41146105a1578063a22cb465146105b657600080fd5b80637c726b69146105435780638c8d2ede1461056357600080fd5b80633b749b871161021c57806355f804b3116101d05780637035bf18116101b55780637035bf18146104f957806370a082311461050e578063715018a61461052e57600080fd5b806355f804b3146104b95780636352211e146104d957600080fd5b80633ccfd60b116102015780633ccfd60b1461046a57806342842e0e1461047f57806354214f691461049f57600080fd5b80633b749b87146104355780633bd649681461045557600080fd5b806318160ddd1161027357806327e235e31161025857806327e235e3146103d35780632fbba1151461040057806334918dfd1461042057600080fd5b806318160ddd1461039057806323b872dd146103b357600080fd5b806306fdde03116102a457806306fdde0314610314578063081812fc14610336578063095ea7b31461036e57600080fd5b806301ffc9a7146102c057806302ce5813146102f5575b600080fd5b3480156102cc57600080fd5b506102e06102db366004611cf1565b6107b2565b60405190151581526020015b60405180910390f35b34801561030157600080fd5b50600a546102e090610100900460ff1681565b34801561032057600080fd5b50610329610897565b6040516102ec9190611d5e565b34801561034257600080fd5b50610356610351366004611d71565b610929565b6040516001600160a01b0390911681526020016102ec565b34801561037a57600080fd5b5061038e610389366004611da6565b610986565b005b34801561039c57600080fd5b50600154600054035b6040519081526020016102ec565b3480156103bf57600080fd5b5061038e6103ce366004611dd0565b610ab4565b3480156103df57600080fd5b506103a56103ee366004611e0c565b60116020526000908152604090205481565b34801561040c57600080fd5b5061038e61041b366004611d71565b610ac4565b34801561042c57600080fd5b5061038e610b9e565b34801561044157600080fd5b5061038e610450366004611e73565b610bba565b34801561046157600080fd5b5061038e610cc0565b34801561047657600080fd5b5061038e610cdc565b34801561048b57600080fd5b5061038e61049a366004611dd0565b610dc5565b3480156104ab57600080fd5b50600f546102e09060ff1681565b3480156104c557600080fd5b5061038e6104d4366004611eb5565b610de0565b3480156104e557600080fd5b506103566104f4366004611d71565b610df5565b34801561050557600080fd5b50610329610e00565b34801561051a57600080fd5b506103a5610529366004611e0c565b610e8e565b34801561053a57600080fd5b5061038e610ef6565b34801561054f57600080fd5b5061038e61055e366004611d71565b610f0a565b34801561056f57600080fd5b50601254610356906001600160a01b031681565b34801561058f57600080fd5b506008546001600160a01b0316610356565b3480156105ad57600080fd5b50610329610f17565b3480156105c257600080fd5b5061038e6105d1366004611f27565b610f26565b3480156105e257600080fd5b5061038e6105f1366004611f79565b610fd4565b61038e610604366004612055565b61101e565b34801561061557600080fd5b506103a5600b5481565b34801561062b57600080fd5b5061032961063a366004611d71565b6112bc565b34801561064b57600080fd5b506103a560095481565b34801561066157600080fd5b5061038e610670366004611d71565b611364565b34801561068157600080fd5b50610329611371565b34801561069657600080fd5b506102e06106a5366004611e0c565b60146020526000908152604090205460ff1681565b3480156106c657600080fd5b5061038e6106d5366004611d71565b61137e565b3480156106e657600080fd5b50601354610356906001600160a01b031681565b34801561070657600080fd5b506102e06107153660046120a1565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b34801561074f57600080fd5b50600a546102e09060ff1681565b34801561076957600080fd5b5061038e610778366004611e0c565b61138b565b34801561078957600080fd5b5061038e611418565b34801561079e57600080fd5b5061038e6107ad366004611eb5565b61145a565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316148061084557507f80ac58cd000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b8061089157507f5b5e139f000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6060600280546108a6906120d4565b80601f01602080910402602001604051908101604052809291908181526020018280546108d2906120d4565b801561091f5780601f106108f45761010080835404028352916020019161091f565b820191906000526020600020905b81548152906001019060200180831161090257829003601f168201915b5050505050905090565b60006109348261146f565b61096a576040517fcf4700e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b6000610991826114af565b9050806001600160a01b0316836001600160a01b0316036109de576040517f943f7b8c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336001600160a01b03821614610a4b576001600160a01b038116600090815260076020908152604080832033845290915290205460ff16610a4b576040517fcfb3b94200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600082815260066020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b610abf83838361154f565b505050565b610acc611787565b60095481610add6001546000540390565b610ae79190612124565b1115610b3a5760405162461bcd60e51b815260206004820152601160248201527f537570706c79206973206c696d6974656400000000000000000000000000000060448201526064015b60405180910390fd5b8060116000610b516008546001600160a01b031690565b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254610b809190612124565b9091555050600854610b9b906001600160a01b0316826117e1565b50565b610ba6611787565b600a805460ff19811660ff90911615179055565b610bc2611787565b60028114610c125760405162461bcd60e51b815260206004820152601560248201527f4e6565642074776f207465616d206d656d6265727300000000000000000000006044820152606401610b31565b81816000818110610c2557610c25612137565b9050602002016020810190610c3a9190611e0c565b6012805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039290921691909117905581816001818110610c7a57610c7a612137565b9050602002016020810190610c8f9190611e0c565b6013805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03929092169190911790555050565b610cc8611787565b600f805460ff19811660ff90911615179055565b610ce4611787565b4760006064610cf483603261214d565b610cfe9190612164565b6012546040519192506000916001600160a01b039091169083908381818185875af1925050503d8060008114610d50576040519150601f19603f3d011682016040523d82523d6000602084013e610d55565b606091505b5050905080610d6357600080fd5b6013546040516001600160a01b03909116908390600081818185875af1925050503d8060008114610db0576040519150601f19603f3d011682016040523d82523d6000602084013e610db5565b606091505b50508091505080610abf57600080fd5b610abf83838360405180602001604052806000815250610fd4565b610de8611787565b600d610abf8284836121d4565b6000610891826114af565b600e8054610e0d906120d4565b80601f0160208091040260200160405190810160405280929190818152602001828054610e39906120d4565b8015610e865780601f10610e5b57610100808354040283529160200191610e86565b820191906000526020600020905b815481529060010190602001808311610e6957829003601f168201915b505050505081565b60006001600160a01b038216610ed0576040517f8f4eb60400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b506001600160a01b031660009081526005602052604090205467ffffffffffffffff1690565b610efe611787565b610f0860006117ff565b565b610f12611787565b600b55565b6060600380546108a6906120d4565b336001600160a01b03831603610f68576040517fb06307db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610fdf84848461154f565b6001600160a01b0383163b1561101857610ffb8484848461185e565b611018576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b600a5460ff166110705760405162461bcd60e51b815260206004820152601060248201527f53616c65206973206e6f74206f70656e000000000000000000000000000000006044820152606401610b31565b600954836110816001546000540390565b61108b9190612124565b11156110d95760405162461bcd60e51b815260206004820152601160248201527f537570706c79206973206c696d697465640000000000000000000000000000006044820152606401610b31565b601054336000908152601160205260409020546110f7908590612124565b11156111455760405162461bcd60e51b815260206004820152601460248201527f57616c6c6574206c696d697420726561636865640000000000000000000000006044820152606401610b31565b82600b54611153919061214d565b3410156111a25760405162461bcd60e51b815260206004820152601a60248201527f4e6f7420656e6f7567682066756e6473207375626d69747465640000000000006044820152606401610b31565b600a54610100900460ff161561128d576040517fffffffffffffffffffffffffffffffffffffffff0000000000000000000000003360601b16602082015260009060340160405160208183030381529060405280519060200120905061123f83838080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050600c549150849050611993565b61128b5760405162461bcd60e51b815260206004820152600d60248201527f496e76616c69642070726f6f66000000000000000000000000000000000000006044820152606401610b31565b505b33600090815260116020526040812080548592906112ac908490612124565b90915550610abf905033846117e1565b600f5460609060ff1661135b57600e80546112d6906120d4565b80601f0160208091040260200160405190810160405280929190818152602001828054611302906120d4565b801561134f5780601f106113245761010080835404028352916020019161134f565b820191906000526020600020905b81548152906001019060200180831161133257829003601f168201915b50505050509050919050565b610891826119a9565b61136c611787565b600c55565b600d8054610e0d906120d4565b611386611787565b601055565b611393611787565b6001600160a01b03811661140f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610b31565b610b9b816117ff565b611420611787565b600a80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff81166101009182900460ff1615909102179055565b611462611787565b600e610abf8284836121d4565b60008054821080156108915750506000908152600460205260409020547c0100000000000000000000000000000000000000000000000000000000161590565b60008160005481101561151d57600081815260046020526040812054907c01000000000000000000000000000000000000000000000000000000008216900361151b575b806000036115145750600019016000818152600460205260409020546114f3565b9392505050565b505b6040517fdf2d9b4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061155a826114af565b9050836001600160a01b0316816001600160a01b0316146115a7576040517fa114810000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000336001600160a01b03861614806115e357506001600160a01b038516600090815260076020908152604080832033845290915290205460ff165b806115fe5750336115f384610929565b6001600160a01b0316145b905080611637576040517f59c896be00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038416611677576040517fea553b3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000838152600660209081526040808320805473ffffffffffffffffffffffffffffffffffffffff191690556001600160a01b0388811684526005835281842080546000190190558716835280832080546001019055858352600490915281207c02000000000000000000000000000000000000000000000000000000004260a01b871781179091558316900361173e5760018301600081815260046020526040812054900361173c57600054811461173c5760008181526004602052604090208390555b505b82846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b5050505050565b6008546001600160a01b03163314610f085760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b31565b6117fb828260405180602001604052806000815250611a45565b5050565b600880546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040517f150b7a020000000000000000000000000000000000000000000000000000000081526000906001600160a01b0385169063150b7a02906118ac903390899088908890600401612294565b6020604051808303816000875af19250505080156118e7575060408051601f3d908101601f191682019092526118e4918101906122d0565b60015b611945573d808015611915576040519150601f19603f3d011682016040523d82523d6000602084013e61191a565b606091505b50805160000361193d576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050949350505050565b6000826119a08584611bec565b14949350505050565b60606119b48261146f565b6119ea576040517fa14c4b5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006119f4611c39565b90508051600003611a145760405180602001604052806000815250611514565b80611a1e84611c48565b604051602001611a2f9291906122ed565b6040516020818303038152906040529392505050565b6000546001600160a01b038416611a88576040517f2e07630000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600003611ac2576040517fb562e8dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03841660008181526005602090815260408083208054680100000000000000018902019055848352600490915290204260a01b86176001861460e11b1790558190818501903b15611b97575b60405182906001600160a01b038816906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4611b60600087848060010195508761185e565b611b7d576040516368d2bf6b60e11b815260040160405180910390fd5b808210611b15578260005414611b9257600080fd5b611bdc565b5b6040516001830192906001600160a01b038816906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4808210611b98575b5060009081556110189085838684565b600081815b8451811015611c3157611c1d82868381518110611c1057611c10612137565b6020026020010151611c97565b915080611c298161231c565b915050611bf1565b509392505050565b6060600d80546108a6906120d4565b604080516080810191829052607f0190826030600a8206018353600a90045b8015611c8557600183039250600a81066030018353600a9004611c67565b50819003601f19909101908152919050565b6000818310611cb3576000828152602084905260409020611514565b5060009182526020526040902090565b7fffffffff0000000000000000000000000000000000000000000000000000000081168114610b9b57600080fd5b600060208284031215611d0357600080fd5b813561151481611cc3565b60005b83811015611d29578181015183820152602001611d11565b50506000910152565b60008151808452611d4a816020860160208601611d0e565b601f01601f19169290920160200192915050565b6020815260006115146020830184611d32565b600060208284031215611d8357600080fd5b5035919050565b80356001600160a01b0381168114611da157600080fd5b919050565b60008060408385031215611db957600080fd5b611dc283611d8a565b946020939093013593505050565b600080600060608486031215611de557600080fd5b611dee84611d8a565b9250611dfc60208501611d8a565b9150604084013590509250925092565b600060208284031215611e1e57600080fd5b61151482611d8a565b60008083601f840112611e3957600080fd5b50813567ffffffffffffffff811115611e5157600080fd5b6020830191508360208260051b8501011115611e6c57600080fd5b9250929050565b60008060208385031215611e8657600080fd5b823567ffffffffffffffff811115611e9d57600080fd5b611ea985828601611e27565b90969095509350505050565b60008060208385031215611ec857600080fd5b823567ffffffffffffffff80821115611ee057600080fd5b818501915085601f830112611ef457600080fd5b813581811115611f0357600080fd5b866020828501011115611f1557600080fd5b60209290920196919550909350505050565b60008060408385031215611f3a57600080fd5b611f4383611d8a565b915060208301358015158114611f5857600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215611f8f57600080fd5b611f9885611d8a565b9350611fa660208601611d8a565b925060408501359150606085013567ffffffffffffffff80821115611fca57600080fd5b818701915087601f830112611fde57600080fd5b813581811115611ff057611ff0611f63565b604051601f8201601f19908116603f0116810190838211818310171561201857612018611f63565b816040528281528a602084870101111561203157600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060006040848603121561206a57600080fd5b83359250602084013567ffffffffffffffff81111561208857600080fd5b61209486828701611e27565b9497909650939450505050565b600080604083850312156120b457600080fd5b6120bd83611d8a565b91506120cb60208401611d8a565b90509250929050565b600181811c908216806120e857607f821691505b60208210810361210857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156108915761089161210e565b634e487b7160e01b600052603260045260246000fd5b80820281158282048414176108915761089161210e565b60008261218157634e487b7160e01b600052601260045260246000fd5b500490565b601f821115610abf57600081815260208120601f850160051c810160208610156121ad5750805b601f850160051c820191505b818110156121cc578281556001016121b9565b505050505050565b67ffffffffffffffff8311156121ec576121ec611f63565b612200836121fa83546120d4565b83612186565b6000601f841160018114612234576000851561221c5750838201355b600019600387901b1c1916600186901b178355611780565b600083815260209020601f19861690835b828110156122655786850135825560209485019460019092019101612245565b50868210156122825760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b60006001600160a01b038087168352808616602084015250836040830152608060608301526122c66080830184611d32565b9695505050505050565b6000602082840312156122e257600080fd5b815161151481611cc3565b600083516122ff818460208801611d0e565b835190830190612313818360208801611d0e565b01949350505050565b6000600019820361232f5761232f61210e565b506001019056fea2646970667358221220baf0578dae328b6e1f7698f54842ec8c469d4ad799ab356662cf649845fa43c864736f6c63430008120033",
  "devdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "totalSupply()": {
        "details": "Returns the total number of tokens in existence. Burned tokens will reduce the count.  To get the total number of tokens minted, please see `_totalMinted`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ApprovalCallerNotOwnerNorApproved()": [
        {
          "notice": "The caller must own the token or be an approved operator."
        }
      ],
      "ApprovalQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ],
      "ApprovalToCurrentOwner()": [
        {
          "notice": "The caller cannot approve to the current owner."
        }
      ],
      "ApproveToCaller()": [
        {
          "notice": "The caller cannot approve to their own address."
        }
      ],
      "BalanceQueryForZeroAddress()": [
        {
          "notice": "Cannot query the balance for the zero address."
        }
      ],
      "MintToZeroAddress()": [
        {
          "notice": "Cannot mint to the zero address."
        }
      ],
      "MintZeroQuantity()": [
        {
          "notice": "The quantity of tokens minted must be more than zero."
        }
      ],
      "OwnerQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ],
      "TransferCallerNotOwnerNorApproved()": [
        {
          "notice": "The caller must own the token or be an approved operator."
        }
      ],
      "TransferFromIncorrectOwner()": [
        {
          "notice": "The token must be owned by `from`."
        }
      ],
      "TransferToNonERC721ReceiverImplementer()": [
        {
          "notice": "Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."
        }
      ],
      "TransferToZeroAddress()": [
        {
          "notice": "Cannot transfer to the zero address."
        }
      ],
      "URIQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "notice": "_ (`-.    ('-.     _ (`-.    ('-.  _ .-') _           _  .-')        (`-.      ('-.         ( (OO  ) _(  OO)   ( (OO  ) _(  OO)( (  OO) )         ( \\( -O )     _(OO  )_  _(  OO)        _.`     \\(,------. _.`     \\(,------.\\     .'_   ,-.-') ,------. ,--(_/   ,. \\(,------.       (__...--'' |  .---'(__...--'' |  .---',`'--..._)  |  |OO)|   /`. '\\   \\   /(__/ |  .---'       |  /  | | |  |     |  /  | | |  |    |  |  \\  '  |  |  \\|  /  | | \\   \\ /   /  |  |           |  |_.' |(|  '--.  |  |_.' |(|  '--. |  |   ' |  |  |(_/|  |_.' |  \\   '   /, (|  '--.        |  .___.' |  .--'  |  .___.' |  .--' |  |   / : ,|  |_.'|  .  '.'   \\     /__) |  .--'        |  |      |  `---. |  |      |  `---.|  '--'  /(_|  |   |  |\\  \\     \\   /     |  `---.       `--'      `------' `--'      `------'`-------'   `--'   `--' '--'     `-'      `------'      ",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1116,
        "contract": "contracts/PepeDrive.sol:PepeDrive",
        "label": "_currentIndex",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1118,
        "contract": "contracts/PepeDrive.sol:PepeDrive",
        "label": "_burnCounter",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1120,
        "contract": "contracts/PepeDrive.sol:PepeDrive",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 1122,
        "contract": "contracts/PepeDrive.sol:PepeDrive",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 1126,
        "contract": "contracts/PepeDrive.sol:PepeDrive",
        "label": "_packedOwnerships",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1130,
        "contract": "contracts/PepeDrive.sol:PepeDrive",
        "label": "_packedAddressData",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1134,
        "contract": "contracts/PepeDrive.sol:PepeDrive",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1140,
        "contract": "contracts/PepeDrive.sol:PepeDrive",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7,
        "contract": "contracts/PepeDrive.sol:PepeDrive",
        "label": "_owner",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 649,
        "contract": "contracts/PepeDrive.sol:PepeDrive",
        "label": "MAX_AMOUNT",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 652,
        "contract": "contracts/PepeDrive.sol:PepeDrive",
        "label": "saleIsActive",
        "offset": 0,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 655,
        "contract": "contracts/PepeDrive.sol:PepeDrive",
        "label": "whitelistActive",
        "offset": 1,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 658,
        "contract": "contracts/PepeDrive.sol:PepeDrive",
        "label": "listingPrice",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 660,
        "contract": "contracts/PepeDrive.sol:PepeDrive",
        "label": "root",
        "offset": 0,
        "slot": "12",
        "type": "t_bytes32"
      },
      {
        "astId": 662,
        "contract": "contracts/PepeDrive.sol:PepeDrive",
        "label": "nftBaseURI",
        "offset": 0,
        "slot": "13",
        "type": "t_string_storage"
      },
      {
        "astId": 664,
        "contract": "contracts/PepeDrive.sol:PepeDrive",
        "label": "unrevealedURI",
        "offset": 0,
        "slot": "14",
        "type": "t_string_storage"
      },
      {
        "astId": 667,
        "contract": "contracts/PepeDrive.sol:PepeDrive",
        "label": "isRevealed",
        "offset": 0,
        "slot": "15",
        "type": "t_bool"
      },
      {
        "astId": 670,
        "contract": "contracts/PepeDrive.sol:PepeDrive",
        "label": "maxPerWallet",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 674,
        "contract": "contracts/PepeDrive.sol:PepeDrive",
        "label": "balances",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 676,
        "contract": "contracts/PepeDrive.sol:PepeDrive",
        "label": "team1",
        "offset": 0,
        "slot": "18",
        "type": "t_address"
      },
      {
        "astId": 678,
        "contract": "contracts/PepeDrive.sol:PepeDrive",
        "label": "team2",
        "offset": 0,
        "slot": "19",
        "type": "t_address"
      },
      {
        "astId": 682,
        "contract": "contracts/PepeDrive.sol:PepeDrive",
        "label": "_claimed",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}